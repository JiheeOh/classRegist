plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.1'
	id 'io.spring.dependency-management' version '1.1.5'
}

group = 'com.class'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	implementation 'org.springframework:spring-jdbc:6.1.5'

	// QueryDSL을 사용하기 위한 라이브러리, 내부 클래스는 사용가능하지만 실제로 쿼리를 위해 사용되는 QClass는 생성되지 않음
	implementation 'com.querydsl:querydsl-apt:5.0.0:jakarta'// QClass를 생성하기 위한 라이브러리

	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly  'org.junit.platform:junit-platform-launcher'


	annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta" // @Entity 어노테이션을 선언한 클래스 탐색하고 QClass를 생성
	annotationProcessor 'jakarta.persistence:jakarta.persistence-api' // Q파일을 찾지 못하는 NoClassDefFoundError 대응
	annotationProcessor 'jakarta.annotation:jakarta.annotation-api'   // Q파일을 찾지 못하는 NoClassDefFoundError 대응
}

tasks.named('test') {
	useJUnitPlatform()
}

/**
 * gradle build 시 QClass 소스도 함께 build 하기 위해 sourceSets에 해당 위치를 추가
 */
def querydslSrcDir = 'src/main/generated'
sourceSets {
	main {
		java {
			srcDirs += [ querydslSrcDir ]
		}
	}
}
/**
 * 자바 여러버전에서 쓸 수 있도록 Q파일 내 Generated를 java.annotation.Generated로 import한다.
 * 이 코드 가 없을 경우, 자바 9의 java.annotation.processing.Generated를 import한다.
 */
compileJava {
	options.compilerArgs << '-Aquerydsl.generatedAnnotationClass=javax.annotation.Generated'
}

/**
 *  위에서 선언한 querydslSrcDir 변수의 src/main/generated에다가 annotation processors가 만든 QClass를 저장한다.
 *  generatedAnnotationClass는 annotation processors에서 생성한 소스파일을 저장할 디렉토리를 지정해준다.
 */
tasks.withType(JavaCompile) {
	options.generatedSourceOutputDirectory = file(querydslSrcDir)
}

/**
 * QClass삭제 : Gradle > build > clean
 * QClass 만들기 : Gradle > build> compileJava
 *
 */
clean {
	// clean 실행 시 생성된 QClass 삭제
	delete file(querydslSrcDir)
}

clean {
	// clean 실행 시 생성된 QClass 삭제
	delete file(querydslSrcDir)
}